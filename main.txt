import 'package:flutter/material.dart';
import 'package:logger/logger.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/services.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
  try {
    await Firebase.initializeApp();
    logger.i('Firebase initialized successfully');
    runApp(const MyApp());
  } catch (error) {
    debugPrint('Failed to initialize Firebase: $error');
    logger.e('Failed to initialize Firebase: $error');
  }
}

final logger = Logger();

class Note {
  final String title;
  final String content;
  final String category;

  Note({
    required this.title,
    required this.content,
    required this.category,
  });
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    logger.i('Building MyApp');
    return MaterialApp(
      title: 'Note App',
      theme: ThemeData(
        primarySwatch: Colors.deepPurple,
        fontFamily: 'Kanit',
      ),
      initialRoute: '/',
      routes: {
        '/': (context) {
          logger.i('Navigating to LoginPage');
          return const LoginPage();
        },
        '/register': (context) {
          logger.i('Navigating to RegisterPage');
          return const RegisterPage();
        },
        '/home': (context) {
          logger.i('Navigating to MyHomePage');
          return const MyHomePage();
        },
        '/reset_password': (context) {
          logger.i('Navigating to ResetPasswordPage');
          return const ResetPasswordPage();
        },
      },
    );
  }
}

class LoginPage extends StatefulWidget {
  const LoginPage({Key? key}) : super(key: key);

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  String email = '';
  String password = '';

  void _login() async {
    try {
      UserCredential userCredential =
          await FirebaseAuth.instance.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      logger.i('User logged in: ${userCredential.user!.uid}');
      Navigator.pushReplacementNamed(context, '/home');
    } catch (e) {
      logger.e('Failed to login: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Incorrect email or password.'),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    logger.i('Building LoginPage');
    return Scaffold(
      appBar: AppBar(
        title: Center(child: const Text('Login')),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              onChanged: (value) {
                email = value;
                logger.i('Email changed: $email');
              },
              decoration: const InputDecoration(labelText: 'Email'),
            ),
            TextField(
              onChanged: (value) {
                password = value;
                logger.i('Password changed: $password');
              },
              obscureText: true,
              decoration: const InputDecoration(labelText: 'Password'),
            ),
            const SizedBox(height: 5),
            ElevatedButton(
              onPressed: () {
                logger.i('Login button pressed');
                _login();
              },
              child: const Text('Login'),
            ),
            const SizedBox(height: 2),
            TextButton(
              onPressed: () {
                Navigator.pushNamed(context, '/reset_password');
              },
              child: const Text('Forgot Password?'),
            ),
            const SizedBox(height: 2),
            TextButton(
              onPressed: () {
                logger.i('Create an Account button pressed');
                Navigator.pushNamed(context, '/register');
              },
              child: const Text('Create an Account'),
            ),
          ],
        ),
      ),
    );
  }
}

class RegisterPage extends StatefulWidget {
  const RegisterPage({Key? key}) : super(key: key);

  @override
  _RegisterPageState createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  String email = '';
  String password = '';

  void _register() async {
    try {
      UserCredential userCredential =
          await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      logger.i('User registered: ${userCredential.user!.uid}');
      Navigator.pushReplacementNamed(context, '/home');
    } catch (e) {
      logger.e('Failed to register user: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Failed to register. Please try again.'),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    logger.i('Building RegisterPage');
    return Scaffold(
      appBar: AppBar(
        title: Center(child: const Text('Register')),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              onChanged: (value) {
                email = value;
                logger.i('Email changed: $email');
              },
              decoration: const InputDecoration(labelText: 'Email'),
            ),
            TextField(
              onChanged: (value) {
                password = value;
                logger.i('Password changed: $password');
              },
              obscureText: true,
              decoration: const InputDecoration(labelText: 'Password'),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                logger.i('Register button pressed');
                _register();
              },
              child: const Text('Register'),
            ),
          ],
        ),
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key}) : super(key: key);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  String? selectedCategory;
  List<String> filterCategory = ['Work', 'Personal', 'Study', 'Other'];

  Query _noteQuery() {
    final user = FirebaseAuth.instance.currentUser;
    CollectionReference notesRef =
        _firestore.collection('users').doc(user!.uid).collection('notes');

    if (selectedCategory != null && selectedCategory != 'All') {
      return notesRef.where('category', isEqualTo: selectedCategory);
    } else {
      return notesRef;
    }
  }

  Widget _buildCategoryDropdown() {
    return DropdownButtonFormField<String>(
      value: selectedCategory,
      items: [...filterCategory, 'All'].map((category) {
        return DropdownMenuItem<String>(
          value: category,
          child: Text(category),
        );
      }).toList(),
      onChanged: (String? value) {
        setState(() {
          selectedCategory = value;
        });
      },
      decoration: InputDecoration(labelText: 'Filter by Category'),
    );
  }

  void _addNote() async {
    final result = await showDialog(
      context: context,
      builder: (BuildContext context) {
        String title = '';
        String content = '';
        return AlertDialog(
          title: const Text('Add Note'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              _buildCategoryDropdown(),
              TextField(
                decoration: const InputDecoration(labelText: 'Title'),
                onChanged: (value) {
                  title = value;
                },
              ),
              TextField(
                decoration: const InputDecoration(labelText: 'Content'),
                onChanged: (value) {
                  content = value;
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () async {
                final user = FirebaseAuth.instance.currentUser;
                await _firestore
                    .collection('users')
                    .doc(user!.uid)
                    .collection('notes')
                    .add({
                  'title': title,
                  'content': content,
                  'category': selectedCategory ??
                      '', // ตรวจสอบ selectedCategory ว่ามีค่าหรือไม่
                });
                Navigator.pop(
                  context,
                  Note(
                    title: title,
                    content: content,
                    category: selectedCategory ??
                        '', // ตรวจสอบ selectedCategory ว่ามีค่าหรือไม่
                  ),
                );
              },
              child: const Text('Save'),
            ),
          ],
        );
      },
    );

    if (result != null) {}
  }

  void _removeNote(String noteId) async {
    final user = FirebaseAuth.instance.currentUser;
    await _firestore
        .collection('users')
        .doc(user!.uid)
        .collection('notes')
        .doc(noteId)
        .delete();
  }

  void _showNoteDetails(String title, String content, String category) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Content: $content'),
              SizedBox(height: 8),
              Text('Category: $category'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('Close'),
            ),
          ],
        );
      },
    );
  }

  void _editNote(String noteId, String currentTitle, String currentContent,
      String category) async {
    final result = await showDialog(
      context: context,
      builder: (BuildContext context) {
        String title = currentTitle;
        String content = currentContent;

        return AlertDialog(
          title: const Text('Edit Note'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              DropdownButtonFormField<String>(
                // เพิ่ม dropdown หมวดหมู่ใหม่ที่ใช้ในการเลือกหมวดหมู่ใหม่
                value: category,
                items: [...filterCategory, 'All'].map((category) {
                  return DropdownMenuItem<String>(
                    value: category,
                    child: Text(category),
                  );
                }).toList(),
                onChanged: (String? value) {
                  setState(() {
                    category = value!;
                  });
                },
                decoration: InputDecoration(labelText: 'Category'),
              ),
              TextField(
                decoration: const InputDecoration(labelText: 'Title'),
                controller: TextEditingController(text: title),
                onChanged: (value) {
                  title = value;
                },
              ),
              TextField(
                decoration: const InputDecoration(labelText: 'Content'),
                controller: TextEditingController(text: content),
                onChanged: (value) {
                  content = value;
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () async {
                final user = FirebaseAuth.instance.currentUser;
                await _firestore
                    .collection('users')
                    .doc(user!.uid)
                    .collection('notes')
                    .doc(noteId)
                    .update({
                  'title': title,
                  'content': content,
                  'category': category,
                });
                Navigator.pop(context,
                    Note(title: title, content: content, category: category));
              },
              child: const Text('Save'),
            ),
          ],
        );
      },
    );

    if (result != null) {}
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Center(child: Text('Note App')),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () {
              _confirmLogout();
            },
          ),
        ],
      ),
      body: Column(
        children: [
          _buildCategoryDropdown(),
          Expanded(
            child: StreamBuilder(
              stream: _noteQuery().snapshots(),
              builder: (BuildContext context,
                  AsyncSnapshot<QuerySnapshot> snapshot) {
                if (snapshot.hasError) {
                  return const Text('Something went wrong');
                }

                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const CircularProgressIndicator();
                }

                return GridView.builder(
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    crossAxisSpacing: 8.0,
                    mainAxisSpacing: 8.0,
                  ),
                  itemCount: snapshot.data!.docs.length,
                  itemBuilder: (context, index) {
                    final doc = snapshot.data!.docs[index];
                    final title = doc['title'];
                    final content = doc['content'];
                    final category = doc['category'];
                    final noteId = doc.id;

                    return _buildNoteItem(title, content, category, noteId);
                  },
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _addNote();
        },
        tooltip: 'Add Note',
        child: const Icon(Icons.add),
      ),
    );
  }

  Widget _buildNoteItem(
      String title, String content, String category, String noteId) {
    return Card(
      elevation: 4.0,
      margin: const EdgeInsets.all(8.0),
      child: InkWell(
        onTap: () => _showNoteDetails(title, category, content),
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Title: $title',
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              const Divider(),
              Text(
                'Category: $category',
              ),
              const Divider(),
              Text(
                'Content: $content',
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  IconButton(
                    icon: const Icon(Icons.delete),
                    onPressed: () {
                      _confirmDelete(context, noteId);
                    },
                  ),
                  IconButton(
                    icon: const Icon(Icons.edit),
                    onPressed: () {
                      _editNote(noteId, title, content, category); // แก้ไขนี้
                    },
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _confirmDelete(BuildContext context, String noteId) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Confirm Delete'),
          content: const Text('Are you sure you want to delete this note?'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                _removeNote(noteId);
                Navigator.of(context).pop();
              },
              child: const Text(
                'Delete',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );
  }

  void _confirmLogout() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Confirm Logout'),
          content: const Text('Are you sure you want to logout?'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                FirebaseAuth.instance.signOut();
                Navigator.pushReplacementNamed(context, '/');
              },
              child: const Text(
                'Logout',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    );
  }
}

class ResetPasswordPage extends StatefulWidget {
  const ResetPasswordPage({Key? key}) : super(key: key);

  @override
  _ResetPasswordPageState createState() => _ResetPasswordPageState();
}

class _ResetPasswordPageState extends State<ResetPasswordPage> {
  String email = '';

  void _resetPassword(BuildContext context) async {
    if (email.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please enter your email.'),
        ),
      );
      return;
    }

    try {
      await FirebaseAuth.instance.sendPasswordResetEmail(email: email);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Password reset email sent.'),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content:
              Text('Failed to send password reset email. Please try again.'),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Reset Password'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              onChanged: (value) {
                setState(() {
                  email = value;
                });
              },
              decoration: const InputDecoration(labelText: 'Email'),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _resetPassword(context);
              },
              child: const Text('Reset Password'),
            ),
          ],
        ),
      ),
    );
  }
}
